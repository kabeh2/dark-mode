{"version":3,"sources":["components/Chart.jsx","components/Charts.jsx","hooks/useLocalStorage.js","hooks/useDarkMode.js","components/Navbar.jsx","index.js"],"names":["Chart","_ref","sparklineData","formattedData","map","price","idx","timeToSubtract","value","date","moment","subtract","format","length","filter","data","react_default","a","createElement","es6","width","height","type","dataKey","stroke","strokeDasharray","interval","Charts","coinData","className","coin","key","name","symbol","src","image","alt","components_Chart","sparkline_in_7d","useLocalStorage","initialValue","_useState","useState","item","window","localStorage","getItem","console","log","JSON","parse","_useState2","Object","slicedToArray","storedValue","setStoredValue","setItem","stringify","useDarkMode","_useLocalStorage","_useLocalStorage2","darkMode","setDarkMode","useEffect","document","querySelector","classList","add","remove","Navbar","_useDarkMode","_useDarkMode2","onClick","e","preventDefault","rootElement","getElementById","ReactDOM","render","setCoinData","axios","get","then","res","catch","err","components_Navbar","components_Charts"],"mappings":"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","file":"static/js/main.39268e0f.chunk.js","sourcesContent":["import React from \"react\";\nimport moment from \"moment\";\nimport {\n  LineChart,\n  Line,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip\n} from \"recharts\";\n\nconst Chart = ({ sparklineData }) => {\n  const formattedData = sparklineData\n    .map((price, idx) => {\n      if (idx % 6 === 0) {\n        const timeToSubtract = 168 - idx;\n        const date = moment()\n          .subtract(timeToSubtract, \"hours\")\n          .format(\"ddd h:mma\");\n        return { value: price, date };\n      } else if (idx === sparklineData.length - 1) {\n        const date = moment().format(\"ddd h:mma\");\n        return { value: price, date };\n      }\n      return null;\n    })\n    .filter(data => data);\n\n  return (\n    <LineChart width={1100} height={300} data={formattedData}>\n      <Line type=\"monotone\" dataKey=\"value\" stroke=\"#8884d8\" />\n      <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\n      <XAxis dataKey=\"date\" interval={3} />\n      <YAxis />\n      <Tooltip />\n    </LineChart>\n  );\n};\n\nexport default Chart;\n","import React from \"react\";\nimport Chart from \"./Chart\";\n\nconst Charts = ({ coinData }) => {\n  return (\n    <div className=\"charts\">\n      {coinData.map(coin => (\n        <div className=\"chart__container\" key={coin.name}>\n          <h2 className=\"coin__title\">{coin.name}</h2>\n          <h4 className=\"coin__symbol\">{coin.symbol}</h4>\n          <div className=\"coin__logo\">\n            <img src={coin.image} height=\"40\" alt={coin.name} />\n          </div>\n          <Chart sparklineData={coin.sparkline_in_7d.price} />\n        </div>\n      ))}\n    </div>\n  );\n};\nexport default Charts;\n","import { useState } from \"react\";\n\nconst useLocalStorage = (key, initialValue) => {\n  const [storedValue, setStoredValue] = useState(() => {\n    // Get from local storage by key\n    const item = window.localStorage.getItem(key);\n    console.log(\"local storage key: \" + item);\n\n    // Parse and return stored JSON, or, if undefined, return initialValue\n    return item ? JSON.parse(item) : initialValue;\n  });\n\n  const setValue = value => {\n    // Save state\n    setStoredValue(value);\n    console.log(\"value: \" + value);\n\n    // Save to local storage\n    window.localStorage.setItem(key, JSON.stringify(value));\n  };\n\n  return [storedValue, setValue];\n};\n\nexport default useLocalStorage;\n","import { useEffect } from \"react\";\nimport useLocalStorage from \"./useLocalStorage\";\n\nconst useDarkMode = () => {\n  const [darkMode, setDarkMode] = useLocalStorage(\"darkMode\");\n\n  console.log(\"useDarkMode: \" + darkMode);\n  useEffect(() => {\n    if (darkMode) {\n      document.querySelector(\"body\").classList.add(\"dark-mode\");\n    } else {\n      document.querySelector(\"body\").classList.remove(\"dark-mode\");\n    }\n  }, [darkMode]);\n  return [darkMode, setDarkMode];\n};\n\nexport default useDarkMode;\n","import React from \"react\";\nimport useDarkMode from \"../hooks/useDarkMode\";\n\nconst Navbar = () => {\n  const [darkMode, setDarkMode] = useDarkMode(false);\n  const toggleMode = e => {\n    e.preventDefault();\n    setDarkMode(!darkMode);\n  };\n  return (\n    <nav className=\"navbar\">\n      <h1>Crypto Tracker</h1>\n      <div className=\"dark-mode__toggle\" onClick={toggleMode}>\n        <div className={darkMode ? \"toggle toggled\" : \"toggle\"} />\n      </div>\n    </nav>\n  );\n};\n\nexport default Navbar;\n","import React, { useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport axios from \"axios\";\n\nimport Charts from \"./components/Charts\";\nimport Navbar from \"./components/Navbar\";\n\nimport \"./styles.scss\";\n\nconst App = () => {\n  const [coinData, setCoinData] = useState([]);\n\n  useEffect(() => {\n    axios\n      .get(\n        \"https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=10&page=1&sparkline=true\"\n      )\n      .then(res => setCoinData(res.data))\n      .catch(err => console.log(err));\n  }, []);\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <Charts coinData={coinData} />\n    </div>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}